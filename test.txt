
Test Case 1: Verify that HMITubeArcObject is correctly generated and handled as a Polygon Object during graphic migration.
Objective: To ensure that the HMITubeArcObject ObjektType from a PDC file is correctly processed and appears in the generated graphicdata XML.
Steps:
1. In the MITO application, import the provided PDC input file (e.g., a diagram like "Heat_Exchanger" that contains at least one HMITubeArcObject).
2. Initiate the graphic migration process to generate the intermediate JAR file.
3. Extract the generated graphicdata.xml file from the output JAR.
4. Open the graphicdata.xml file.
5. Locate an object where the ObjectType attribute is "HMITubeArcObject".
Expected Result:
· The graphicdata.xml file must contain at least one entry with ObjectType="HMITubeArcObject".
· The object's polygon data (e.g., points, coordinates) must be present and correctly defined within the XML structure.
· The object should not be converted to HMITubePolyline; it must retain its original HMITubeArcObject type.
---
Test Case 2: Verify that HMITubeTeeObject is correctly generated and handled as a Polygon Object during graphic migration.
Objective: To ensure that the HMITubeTeeObject ObjektType from a PDC file is correctly processed and appears in the generated graphicdata XML.
Steps:
1. In the MITO application, import the provided PDC input file (e.g., a diagram that contains at least one HMITubeTeeObject).
2. Initiate the graphic migration process to generate the intermediate JAR file.
3. Extract the generated graphicdata.xml file from the output JAR.
4. Open the graphicdata.xml file.
5. Locate an object where the ObjectType attribute is "HMITubeTeeObject".
Expected Result:
· The graphicdata.xml file must contain at least one entry with ObjectType="HMITubeTeeObject".
· The object's polygon data (e.g., points, coordinates) must be present and correctly defined.
· The object should not be converted to HMITubePolyline; it must retain its original HMITubeTeeObject type.
---
Test Case 3: Verify that HMITubeDoubleTeeObject is correctly generated and handled as a Polygon Object during graphic migration.
Objective: To ensure that the HMITubeDoubleTeeObject ObjektType from a PDC file is correctly processed and appears in the generated graphicdata XML.
Steps:
1. In the MITO application, import the provided PDC input file (e.g., a diagram that contains at least one HMITubeDoubleTeeObject).
2. Initiate the graphic migration process to generate the intermediate JAR file.
3. Extract the generated graphicdata.xml file from the output JAR.
4. Open the graphicdata.xml file.
5. Locate an object where the ObjectType attribute is "HMITubeDoubleTeeObject".
Expected Result:
· The graphicdata.xml file must contain at least one entry with ObjectType="HMITubeDoubleTeeObject".
· The object's polygon data (e.g., points, coordinates) must be present and correctly defined.
· The object should not be converted to HMITubePolyline; it must retain its original HMITubeDoubleTeeObject type.
---
Test Case 4: Verify that a diagram containing a mix of HMITubeArcObject, HMITubeTeeObject, and HMITubeDoubleTeeObject generates all objects correctly in the graphicdata XML.
Objective: To ensure that a complex diagram with multiple new ObjektTypes is fully and accurately migrated.
Steps:
1. In the MITO application, import the provided PDC input file that contains a mix of all three new ObjektTypes (HMITubeArcObject, HMITubeTeeObject, HMITubeDoubleTeeObject), totaling around 20 objects as mentioned.
2. Initiate the graphic migration process.
3. Extract the generated graphicdata.xml file from the output JAR.
4. Open the graphicdata.xml file.
5. Count the number of objects for each of the three new ObjektTypes.
Expected Result:
· The total count of objects with types HMITubeArcObject, HMITubeTeeObject, and HMITubeDoubleTeeObject in the graphicdata.xml must match the total number of these objects present in the source PDC file (e.g., all ~20 objects).
· No objects of these types should be missing or have been converted to HMITubePolyline.
---
Test Case 5: Verify that the generated graphicdata XML for the new ObjektTypes matches the expected structure and data from the reference sheet (graphicv15.xml).
Objective: To validate that the data integrity and XML structure for the new objects conform to the project's standard as defined in the reference file.
Steps:
1. Perform a graphic migration for a PDC file known to contain the new ObjektTypes (as in Test Case 4).
2. Extract the generated graphicdata.xml.
3. Obtain the reference graphicv15.xml sheet.
4. For one object of each new type (HMITubeArcObject, HMITubeTeeObject, HMITubeDoubleTeeObject) in the generated XML:
   · Identify its unique identifier (e.g., an ID attribute).
   · Find the object with the same identifier in the graphicv15.xml reference sheet.
   · Compare the structure and data (e.g., polygon points, layer, other attributes) between the generated object and the reference object.
Expected Result:
· For each sampled object, the structure and all data points in the generated graphicdata.xml must be identical to the corresponding object in the graphicv15.xml reference sheet.
· There should be no discrepancies in coordinates, point orders, or critical attributes.
node.xml
---
Test Case 1: Verify that node.xml is generated with the correct structure for a Normal PDC when the 'BildName' subsheet is present and BildType is empty.
Objective: To ensure that when a PDC with a 'BildName' subsheet and an empty BildType is imported, the generated node.xml follows the Normal PDC syntax.
Steps:
1. In the MITO application, import a PDC Excel file that contains a 'BildName' subsheet.
2. In the 'BildName' subsheet, ensure the 'BildType' for the target diagram is empty.
3. Generate the diagram from the imported PDC data.
4. Open the generated output JAR file.
5. Locate and extract the node.xml file for the specific diagram.
Expected Result:
· The node.xml file must be present.
· The file must have the exact structure for a Normal PDC:
  ```xml
  <?xml version="1.0" encoding="utf-8" standalone="no" ?>
  <!DOCTYPE ImportNode SYSTEM "ImportNode.dtd">
  <ImportNode cmd="ins" sourceId="<ID>"></ImportNode>
  ```
· The <ID> placeholder must be a valid, non-empty value.
---
Test Case 2: Verify that node.xml is generated with the correct structure for a Small PDC when the 'BildName' subsheet is present and BildType is '2'.
Objective: To ensure that when a PDC with a 'BildName' subsheet and BildType set to '2' is imported, the generated node.xml follows the Small PDC syntax.
Steps:
1. In the MITO application, import a PDC Excel file that contains a 'BildName' subsheet.
2. In the 'BildName' subsheet, ensure the 'BildType' for the target diagram is set to '2'.
3. Generate the diagram from the imported PDC data.
4. Open the generated output JAR file.
5. Locate and extract the node.xml file for this specific diagram.
Expected Result:
· The node.xml file must be present.
· The file must have the exact structure for a Small PDC:
  ```xml
  <?xml version="1.0" encoding="utf-8" standalone="no" ?>
  <!DOCTYPE ImportNode SYSTEM "ImportNode.dtd">
  <ImportNode cmd="ins" sourceId="<ID>">
      <context>
          <key>sys_diagram_type</key>
          <value>2</value>
      </context>
  </ImportNode>
  ```
· The <ID> placeholder must be a valid, non-empty value.
---
Test Case 3: Verify that node.xml is generated with the Normal PDC structure when the 'BildName' subsheet is not present in the imported PDC file.
Objective: To ensure the system defaults to the Normal PDC structure when the 'BildName' subsheet is absent.
Steps:
1. In the MITO application, import a PDC Excel file that does not contain a 'BildName' subsheet at all.
2. Generate the diagram from the imported PDC data.
3. Open the generated output JAR file.
4. Locate and extract the node.xml file.
Expected Result:
· The node.xml file must be present.
· The system must default to the Normal PDC structure:
  ```xml
  <?xml version="1.0" encoding="utf-8" standalone="no" ?>
  <!DOCTYPE ImportNode SYSTEM "ImportNode.dtd">
  <ImportNode cmd="ins" sourceId="<ID>"></ImportNode>
  ```
· The <ID> placeholder must be a valid, non-empty value.
---
Test Case 4: Verify that the sourceId attribute in node.xml correctly matches the id from the graphicdata.xml file.
Objective: To validate data integrity by ensuring the sourceId in node.xml correctly references the diagram's ID from graphicdata.xml.
Steps:
1. Import a PDC file and generate the diagram (can be for any PDC type).
2. Open the generated output JAR.
3. Extract both the node.xml and the graphicdata.xml files.
4. Open the graphicdata.xml and find the id attribute of the root <graphicdata> element (e.g., id="44").
5. Open the node.xml file and note the value of the sourceId attribute in the <ImportNode> tag.
Expected Result:
· The value of the sourceId attribute in node.xml must be identical to the value of the id attribute from the <graphicdata> element in graphicdata.xml.
· Example: If graphicdata.xml has id="44", then node.xml must have sourceId="44".
---
Test Case 5: Verify that generating a multi-diagram project with a mix of Normal and Small PDC types creates separate, correct node.xml files for each diagram in the output JAR.
Objective: To ensure that in a complex project with multiple diagrams, each diagram gets its own correctly formatted node.xml file based on its individual PDC type.
Steps:
1. In the MITO application, import a PDC Excel file that contains two diagrams in the 'BildName' subsheet:
   · Diagram A: Has BildType set to empty (Normal PDC).
   · Diagram B: Has BildType set to '2' (Small PDC).
2. Generate the entire project (from the parent node), producing a single output JAR.
3. Open the generated JAR file.
4. Navigate to the directory/folder for Diagram A and locate its node.xml file.
5. Navigate to the directory/folder for Diagram B and locate its node.xml file.
Expected Result:
· Two separate node.xml files must be found, each within its respective diagram's folder in the JAR.
· The node.xml for Diagram A (Normal PDC) must have the empty <ImportNode> structure.
· The node.xml for Diagram B (Small PDC) must include the <context> block with sys_diagram_type=2.
· The sourceId in each node.xml must correctly match the id in its corresponding diagram's graphicdata.xml file.
Fetch sub sheet
---
Test Case 1: Verify that the system can successfully read the 'BildName' subsheet when it is present in the PDC Excel file.
Objective: To confirm that the MITO application can successfully locate and access the 'BildName' subsheet when it exists in the PDC Excel file.
Steps:
1. Prepare a PDC Excel file that contains a subsheet named exactly 'BildName'.
2. In the MITO application, initiate the import process for this PDC Excel file.
3. Monitor the import process for any errors.
Expected Result:
· The PDC Excel file should be imported successfully without any errors.
· The system should correctly identify and read the data from the 'BildName' subsheet during the import process.
---
Test Case 2: Verify that the 'BildType' value is correctly fetched as empty when present in the 'BildName' subsheet for a Normal PDC.
Objective: To ensure that when the 'BildName' subsheet exists and the 'BildType' cell for a diagram is empty, the system correctly interprets this as a Normal PDC.
Steps:
1. Prepare a PDC Excel file with a 'BildName' subsheet.
2. For a specific diagram in the 'BildName' subsheet, leave the 'BildType' cell blank or empty.
3. Import the PDC Excel file into the MITO application.
4. Check the internal data model or generate the diagram to verify the fetched BildType value.
Expected Result:
· The system must fetch and store the BildType value as empty or null for the specified diagram.
· The diagram must be treated as a Normal PDC during subsequent operations (e.g., generating the correct node.xml structure).
---
Test Case 3: Verify that the 'BildType' value is correctly fetched as '2' when present in the 'BildName' subsheet for a Small PDC.
Objective: To ensure that when the 'BildName' subsheet exists and the 'BildType' cell for a diagram contains '2', the system correctly interprets this as a Small PDC.
Steps:
1. Prepare a PDC Excel file with a 'BildName' subsheet.
2. For a specific diagram in the 'BildName' subsheet, set the 'BildType' cell value to '2'.
3. Import the PDC Excel file into the MITO application.
4. Check the internal data model or generate the diagram to verify the fetched BildType value.
Expected Result:
· The system must fetch and store the BildType value as '2' for the specified diagram.
· The diagram must be treated as a Small PDC during subsequent operations (e.g., generating the correct node.xml structure with the <context> block).
---
Test Case 4: Verify that the system handles the absence of the 'BildName' subsheet gracefully and defaults the BildType to empty (Normal PDC).
Objective: To verify that the import process does not fail when the 'BildName' subsheet is missing and that it defaults all diagrams to Normal PDC type.
Steps:
1. Prepare a PDC Excel file that does not contain a subsheet named 'BildName'.
2. Import this PDC Excel file into the MITO application.
3. Monitor the import process for any errors.
4. Check the internal data model or generate a diagram to verify the default BildType value.
Expected Result:
· The PDC Excel file should be imported successfully without any errors related to the missing subsheet.
· The system should default the BildType for all diagrams to empty.
· All diagrams must be treated as Normal PDC by default.
---
Test Case 5: Verify that the system correctly reads the subsheet regardless of case sensitivity (e.g., 'bildname', 'BILDNAME').
Objective: To ensure the sheet name lookup is not case-sensitive and can fetch data from variations of the 'BildName' sheet name.
Steps:
1. Prepare a PDC Excel file where the subsheet is named using a different case, e.g., 'bildname' (all lowercase).
2. Populate this sheet with a valid 'BildType' value (e.g., '2').
3. Import the PDC Excel file into the MITO application.
4. Check if the system correctly fetches the 'BildType' value from the case-variant sheet name.
Expected Result:
· The PDC Excel file should be imported successfully.
· The system should correctly read the 'BildType' value from the 'bildname' subsheet.
· The diagram should be correctly identified as a Small PDC (if 'BildType=2' was read).
---
Test Case 6: Verify that the system handles invalid/unsupported values in the BildType field (e.g., '1', 'abc', '3') by defaulting to Normal PDC behavior.
Objective: To ensure the system is robust and can handle invalid inputs in the 'BildType' field without failing, defaulting to a safe state.
Steps:
1. Prepare a PDC Excel file with a 'BildName' subsheet.
2. For a specific diagram, set the 'BildType' cell to an invalid or unsupported value, such as '1', 'abc', or '3'.
3. Import the PDC Excel file into the MITO application.
4. Monitor for any import errors.
5. Check the internal data model or generate the diagram to verify how the invalid BildType was handled.
Expected Result:
· The PDC Excel file should be imported successfully. The system may log a warning, but it should not crash.
· The system should treat the diagram as a Normal PDC (BildType empty) when an unsupported value is encountered.
· The generated node.xml for this diagram should follow the Normal PDC structure (without the <context> block).
DB schemaa 
.
---
Test Case 1: Verify that the new column 'image_type' is successfully added to the 'pdc_images' table.
Objective: To confirm that the database schema migration is executed correctly and the new column exists with the proper data type.
Steps:
1. Run the database migration script that adds the new column to the pdc_images table.
2. Connect to the database using a SQL client.
3. Query the database schema to inspect the structure of the pdc_images table.
Expected Result:
· The pdc_images table must contain a new column named image_type.
· The data type of the image_type column should be an integer (e.g., INT) to store numerical values like 0, 2, etc.
---
Test Case 2: Verify that the 'image_type' column accepts and stores the correct value for a Normal PDC (NULL or 0).
Objective: To ensure that when a Normal PDC is processed, the system correctly stores a NULL or 0 in the image_type column.
Steps:
1. Import a PDC Excel file for a Normal PDC (where 'BildType' is empty or the 'BildName' subsheet is absent).
2. After import, query the pdc_images table for the record corresponding to the imported diagram.
3. Check the value stored in the image_type column.
Expected Result:
· The image_type column for the Normal PDC diagram record must contain either NULL or 0, as defined by the application's logic for a default/Normal PDC type.
---
Test Case 3: Verify that the 'image_type' column accepts and stores the correct value for a Small PDC (2).
Objective: To ensure that when a Small PDC is processed, the system correctly stores the value 2 in the image_type column.
Steps:
1. Import a PDC Excel file for a Small PDC (where 'BildType' is set to '2' in the 'BildName' subsheet).
2. After import, query the pdc_images table for the record corresponding to the imported diagram.
3. Check the value stored in the image_type column.
Expected Result:
· The image_type column for the Small PDC diagram record must contain the integer value 2.
---
Test Case 4: Verify that the system correctly fetches and utilizes the 'image_type' value from the 'pdc_images' table during diagram generation.
Objective: To validate that the stored image_type value in the database is correctly read and used to determine the PDC type when generating the output.
Steps:
1. Ensure the pdc_images table contains at least one diagram record with image_type = 2 (Small PDC) and one with image_type = 0/NULL (Normal PDC).
2. For each diagram, initiate the diagram generation process from the MITO application.
3. For the Small PDC diagram, check the generated node.xml file in the output JAR.
4. For the Normal PDC diagram, check the generated node.xml file in the output JAR.
Expected Result:
· For the diagram with image_type = 2, the generated node.xml must follow the Small PDC structure (containing the <context> block).
· For the diagram with image_type = 0/NULL, the generated node.xml must follow the Normal PDC structure (without the <context> block).
· This proves the value was successfully fetched from the database and applied.
---
Test Case 5: Verify that generating a diagram from a parent node containing both Normal and Small PDC types correctly fetches and uses the respective 'image_type' values from the 'pdc_images' table.
Objective: To ensure that in a batch/bulk generation scenario, the system correctly handles multiple diagrams with different types stored in the database.
Steps:
1. Create a parent node in MITO that contains two child diagrams:
   · Diagram A: Stored in pdc_images with image_type = 0/NULL (Normal PDC).
   · Diagram B: Stored in pdc_images with image_type = 2 (Small PDC).
2. Select the parent node and initiate the "Generate Diagram" action for the entire set.
3. Once generation is complete, open the output JAR/JARs.
4. Locate and inspect the node.xml file for Diagram A.
5. Locate and inspect the node.xml file for Diagram B.
Expected Result:
· The generation process must complete successfully for both diagrams.
· The node.xml for Diagram A (Normal PDC) must have the empty <ImportNode> structure.
· The node.xml for Diagram B (Small PDC) must include the <context> block with sys_diagram_type=2.
· This confirms the system individually queried the pdc_images table for each diagram and used the correct image_type for generation.
