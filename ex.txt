Here are the specific modifications:

## 1. Create proper JSON output instead of printing

Replace the `main()` function with:
```python
import json

def main():
    try:
        analyzer = JiraXrayAnalyzer()
        results = {}
        
        # 1. Get tickets by fix version
        if os.getenv('FIX_VERSION'):
            results['tickets_by_fix_version'] = analyzer.get_tickets_by_fix_version()
        
        # 2. Get test plan results (this will dynamically get executions)
        if os.getenv('TEST_PLAN_KEY'):
            results['test_plan_analysis'] = analyzer.get_test_plan_results()
        
        # Write results to JSON file
        output_file = 'jira_analysis_results.json'
        with open(output_file, 'w') as f:
            json.dump(results, f, indent=2)
        
        print(f"Analysis completed! Results saved to {output_file}")
        
    except Exception as e:
        error_result = {"error": str(e)}
        with open('jira_analysis_error.json', 'w') as f:
            json.dump(error_result, f, indent=2)
        print(f"Error: {e}")
```

## 2. Remove test execution key dependency and enhance test plan method

Remove the `get_test_execution_results()` method entirely and update `get_test_plan_results()`:

```python
def get_test_plan_results(self) -> Dict:
    """Get results for test plan from environment variable"""
    test_plan_key = os.getenv('TEST_PLAN_KEY')
    
    if not test_plan_key:
        return {"error": "TEST_PLAN_KEY not set in environment variables"}
    
    # Get test executions linked to the test plan using Xray API
    try:
        xray_endpoint = f"api/testplan/{test_plan_key}/testexecution"
        executions_data = self.make_xray_request(xray_endpoint)
        
        execution_results = []
        total_aggregated = {
            'total_tests': 0,
            'passed_tests': 0,
            'failed_tests': 0,
            'failed_tests_with_bugs': []
        }
        
        for execution in executions_data:
            execution_key = execution.get('key')
            if execution_key:
                # Get results for each execution dynamically
                execution_result = self.get_test_execution_results_specific(execution_key)
                if execution_result:
                    execution_results.append({
                        'execution_key': execution_key,
                        'execution_summary': execution.get('summary', ''),
                        'results': execution_result
                    })
                    
                    # Aggregate results
                    total_aggregated['total_tests'] += execution_result['total_tests']
                    total_aggregated['passed_tests'] += execution_result['passed_tests']
                    total_aggregated['failed_tests'] += execution_result['failed_tests']
                    total_aggregated['failed_tests_with_bugs'].extend(execution_result['failed_tests_with_bugs'])
        
        return {
            'test_plan_key': test_plan_key,
            'summary': total_aggregated,
            'execution_details': execution_results
        }
        
    except Exception as e:
        print(f"Xray test plan API failed: {e}")
        # Fallback to JQL method
        return self._get_test_plan_via_jql(test_plan_key)
```

Also remove the test execution key section from the main function since we're only using test plan now.

These changes will:
1. Generate a proper JSON file instead of console output
2. Dynamically fetch all test executions from the test plan without needing TEST_EXECUTION_KEY in .env
3. Provide cleaner JSON structure with summary and execution details
